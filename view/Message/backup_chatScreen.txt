<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Screen</title>
    <style>
        
    </style>
    
</head>

<body>
    <main>
        <div id="userList"></div>
        <div id="AlluserMessage"></div>
        <div id="currentUserMessage"></div>
        <form class="expense-form" id="first" onsubmit="handleLoginFormSubmission(event)">
            <br><br>
            <input type="text" id="message" name="message">
            
            <button type="submit">Send</button>
        </form>

        <!-- <form action="/" method="POST" onsubmit="document.getElementById('username').value=localStorage.getItem('username')"> 
            <input type="text" id="message" name="message"><input type="hidden" name="username" id="username"><br> 
            <button type="submit">Send</button>

        </form> -->
    </main>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.4.1/axios.min.js" integrity="sha512-Fh/JL4KFgbH0OFN4EMEOvk90MTCjVuTVGFRDc+Kh5PyUFOzSzn/KA6PTOSNywfm5Ruppr40Uj09oGuj5tn6jiQ==" crossorigin="anonymous"></script>

    <script>
   // ...
   window.onload = async function() {
    var pageTitle = "Chat Screen";  // Replace this with the actual title
    var path = "/Message/chatScreen";  // Replace this with the actual path
 
    //  // Set the page title
    document.title = pageTitle;

    try {
        const response = await axios.get('http://localhost:3000/Message/showJoinedMember'); // to get the jsoon value
        console.log("Response:", response);

        if (response.status === 200) {
            const userList = response.data;
           


            // Check if userList is an array before using map
            if (Array.isArray(userList)) {
                const userListElement = document.getElementById('userList');
                
                userListElement.innerHTML = userList.map(user => `<p>${user.name} joined</p>`).join('');
            } else {
                console.error("Invalid user list format");
            }
        } else {
            console.error("Error in server response:", response.status);
        }
    } catch (error) {
        console.error(error);
    }

    //to show all the message on the screen
    const response = await axios.get('http://localhost:3000/Message/showmessage'); // to get all message
    console.log("Response of message:", response.data);
    const userMessage_ = document.getElementById('AlluserMessage');
    userMessage_.innerHTML += response.data.map(element => {

        console.log("show the message  ",element.message);
        return`<p>${element.Username}: ${element.message}</p>`;   
        });

};

            function parseJwt (token) {
                    var base64Url = token.split('.')[1];
                    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                    var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function(c) {
                        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                    }).join(''));
                    return JSON.parse(jsonPayload);
            }
            function handleLoginFormSubmission(e) {
                e.preventDefault(); 
                const token = localStorage.getItem('token');
                const decodeToken= parseJwt(token) 
                console.log("can I see the name   ----",decodeToken.name);
                console.log("can I see the id   ----",decodeToken.Id);
                const user_id= decodeToken.Id;

                const messageInput = document.getElementById('message');
                const message = messageInput.value; //  message from the input field
    
                axios.post('http://localhost:3000/Message/chatScreen', { message: message, user_id:user_id})
                .then(response => {
                    // Handle the response as needed
                    console.log("Response from server:", response.data);
                    const userMessage_ = document.getElementById('currentUserMessage');
                    userMessage_.innerHTML += `<p>${decodeToken.name}: ${message}</p>`;
                    
                    })
                .catch(error => {
                    console.error("Error from server:", error);
                });

            }
      

     </script>

</body> 

</html>






